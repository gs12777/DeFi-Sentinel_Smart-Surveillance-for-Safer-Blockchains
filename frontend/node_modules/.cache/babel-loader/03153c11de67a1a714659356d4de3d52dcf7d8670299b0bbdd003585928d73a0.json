{"ast":null,"code":"import{ethers}from'ethers';// ✅ Load Environment Variables\nconst INFURA_KEY=process.env.REACT_APP_INFURA_KEY;const API_BASE_URL=\"http://127.0.0.1:5000\";if(!INFURA_KEY){throw new Error(\"❌ Missing INFURA API Key. Please check your .env file.\");}// ✅ Set Up Provider\nconst provider=new ethers.JsonRpcProvider(`https://sepolia.infura.io/v3/${INFURA_KEY}`);// ✅ List of Verified Smart Contracts\nconst VERIFIED_CONTRACTS=['0xdac17f958d2ee523a2206206994597c13d831ec7'];// ✅ Helper Functions\nconst isValidEthereumAddress=address=>ethers.isAddress(address);const formatEtherValue=weiValue=>parseFloat(ethers.formatEther(weiValue)).toFixed(6);const formatGweiValue=weiValue=>parseFloat(ethers.formatUnits(weiValue,\"gwei\")).toFixed(6);// ✅ Fetch Transaction from Blockchain\nconst getTransaction=async txHash=>{try{console.log(`🔍 Fetching transaction details for: ${txHash}`);if(!txHash||typeof txHash!==\"string\")throw new Error(\"❌ Invalid transaction hash.\");const transaction=await provider.getTransaction(txHash);if(!transaction)throw new Error(\"❌ Transaction not found.\");const block=await provider.getBlock(transaction.blockNumber);const timestamp=(block===null||block===void 0?void 0:block.timestamp)||Math.floor(Date.now()/1000);const txData={hash:transaction.hash,from:transaction.from,to:transaction.to||\"N/A\",value:formatEtherValue(transaction.value),gasPrice:formatGweiValue(transaction.gasPrice),ageHours:((Date.now()/1000-timestamp)/3600).toFixed(2)};console.log(\"✅ Transaction Data:\",txData);return txData;}catch(error){console.error(\"❌ Error fetching transaction:\",error);return null;}};// ✅ Fraud Risk Analysis (Rule-based + AI-based)\nconst checkFraudRisk=async txData=>{try{console.log(\"🔍 Analyzing fraud risk for transaction:\",txData);if(!isValidEthereumAddress(txData.from))throw new Error(`❌ Invalid sender address: ${txData.from}`);if(txData.to&&!isValidEthereumAddress(txData.to))throw new Error(`❌ Invalid recipient address: ${txData.to}`);const senderTxCount=await provider.getTransactionCount(txData.from);const recentTxs=await provider.getLogs({fromBlock:'latest',address:txData.from});// ✅ Define Risk Rules\nconst SEPOLIA_RULES={HIGH_VALUE:0.3,HIGH_GAS:3,NEW_ACCOUNT:3,FREQUENT_TX:5};let ruleBasedRisk=0;const flags={};const value=parseFloat(txData.value);const gasPrice=parseFloat(txData.gasPrice);// ✅ Rule-based Detection\nif(value===0){ruleBasedRisk+=45;flags.zeroValue=\"Zero transaction value\";}if(txData.to&&!VERIFIED_CONTRACTS.includes(txData.to)){ruleBasedRisk+=30;flags.unverifiedContract=\"Unverified contract address\";}if(value>SEPOLIA_RULES.HIGH_VALUE){ruleBasedRisk+=40;flags.highValue=\"High-value transaction\";}if(gasPrice<=10){// No risk added\n}else if(gasPrice<=30){ruleBasedRisk+=15;flags.gasPriceTier=\"Moderate Gas Cost\";}else if(gasPrice<=50){ruleBasedRisk+=24;flags.gasPriceTier=\"High Gas Cost\";}else{ruleBasedRisk+=35;flags.gasPriceTier=\"Very High Gas Cost\";}if(senderTxCount<SEPOLIA_RULES.NEW_ACCOUNT){ruleBasedRisk+=30;flags.newAccount=\"Suspicious new account\";}if(recentTxs.length>SEPOLIA_RULES.FREQUENT_TX){ruleBasedRisk+=25;flags.frequentTransactions=\"Frequent transactions in short time\";}const ageWeight=Math.max(0,10-parseFloat(txData.ageHours)/3);ruleBasedRisk+=ageWeight;if(parseFloat(txData.ageHours)>3&&ruleBasedRisk>20){ruleBasedRisk+=10;flags.oldTransaction=\"Transaction older than 3 hours\";}console.log(\"✅ Rule-based Risk Score:\",ruleBasedRisk,\"Flags:\",flags);// ✅ AI-Based Prediction\nconst aiPrediction=await getAIPrediction(txData);const result={ruleBasedRisk:Math.min(ruleBasedRisk,100).toFixed(2),aiBasedRisk:aiPrediction.fraud_probability.toFixed(2),isFraud:aiPrediction.is_fraud,flags};console.log(\"✅ Final Fraud Analysis:\",result);return result;}catch(error){console.error(\"❌ Fraud analysis failed:\",error);return{ruleBasedRisk:\"0%\",aiBasedRisk:\"0%\",isFraud:false,flags:{}};}};// ✅ Function to Call Flask API for AI-based Fraud Detection\nconst getAIPrediction=async txData=>{try{console.log(\"📡 Sending transaction data to AI model for fraud prediction...\");const response=await fetch(`${API_BASE_URL}/predict`,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({tx_value_eth:txData.value,gas_price_gwei:txData.gasPrice,time_since_last_tx:txData.ageHours,num_transactions_per_address:50,account_age_days:365,gas_fee_ratio:0.02})});if(!response.ok){throw new Error(\"❌ AI model prediction failed.\");}const prediction=await response.json();console.log(\"✅ AI Model Response:\",prediction);return prediction;}catch(error){console.error(\"❌ AI prediction error:\",error);return{is_fraud:false,fraud_probability:0};}};// ✅ Export Service\nconst BlockchainService={checkFraudRisk,getTransaction};export default BlockchainService;","map":{"version":3,"names":["ethers","INFURA_KEY","process","env","REACT_APP_INFURA_KEY","API_BASE_URL","Error","provider","JsonRpcProvider","VERIFIED_CONTRACTS","isValidEthereumAddress","address","isAddress","formatEtherValue","weiValue","parseFloat","formatEther","toFixed","formatGweiValue","formatUnits","getTransaction","txHash","console","log","transaction","block","getBlock","blockNumber","timestamp","Math","floor","Date","now","txData","hash","from","to","value","gasPrice","ageHours","error","checkFraudRisk","senderTxCount","getTransactionCount","recentTxs","getLogs","fromBlock","SEPOLIA_RULES","HIGH_VALUE","HIGH_GAS","NEW_ACCOUNT","FREQUENT_TX","ruleBasedRisk","flags","zeroValue","includes","unverifiedContract","highValue","gasPriceTier","newAccount","length","frequentTransactions","ageWeight","max","oldTransaction","aiPrediction","getAIPrediction","result","min","aiBasedRisk","fraud_probability","isFraud","is_fraud","response","fetch","method","headers","body","JSON","stringify","tx_value_eth","gas_price_gwei","time_since_last_tx","num_transactions_per_address","account_age_days","gas_fee_ratio","ok","prediction","json","BlockchainService"],"sources":["C:/Users/gurus/New fold/blockchain-fraud-detect-new/frontend/src/services/BlockchainService.js"],"sourcesContent":["import { ethers } from 'ethers';\r\n\r\n// ✅ Load Environment Variables\r\nconst INFURA_KEY = process.env.REACT_APP_INFURA_KEY;\r\nconst API_BASE_URL = \"http://127.0.0.1:5000\";\r\n\r\nif (!INFURA_KEY) {\r\n  throw new Error(\"❌ Missing INFURA API Key. Please check your .env file.\");\r\n}\r\n\r\n// ✅ Set Up Provider\r\nconst provider = new ethers.JsonRpcProvider(`https://sepolia.infura.io/v3/${INFURA_KEY}`);\r\n\r\n// ✅ List of Verified Smart Contracts\r\nconst VERIFIED_CONTRACTS = ['0xdac17f958d2ee523a2206206994597c13d831ec7'];\r\n\r\n// ✅ Helper Functions\r\nconst isValidEthereumAddress = (address) => ethers.isAddress(address);\r\nconst formatEtherValue = (weiValue) => parseFloat(ethers.formatEther(weiValue)).toFixed(6);\r\nconst formatGweiValue = (weiValue) => parseFloat(ethers.formatUnits(weiValue, \"gwei\")).toFixed(6);\r\n\r\n// ✅ Fetch Transaction from Blockchain\r\nconst getTransaction = async (txHash) => {\r\n  try {\r\n    console.log(`🔍 Fetching transaction details for: ${txHash}`);\r\n\r\n    if (!txHash || typeof txHash !== \"string\") throw new Error(\"❌ Invalid transaction hash.\");\r\n\r\n    const transaction = await provider.getTransaction(txHash);\r\n    if (!transaction) throw new Error(\"❌ Transaction not found.\");\r\n\r\n    const block = await provider.getBlock(transaction.blockNumber);\r\n    const timestamp = block?.timestamp || Math.floor(Date.now() / 1000);\r\n\r\n    const txData = {\r\n      hash: transaction.hash,\r\n      from: transaction.from,\r\n      to: transaction.to || \"N/A\",\r\n      value: formatEtherValue(transaction.value),\r\n      gasPrice: formatGweiValue(transaction.gasPrice),\r\n      ageHours: ((Date.now() / 1000 - timestamp) / 3600).toFixed(2),\r\n    };\r\n\r\n    console.log(\"✅ Transaction Data:\", txData);\r\n    return txData;\r\n  } catch (error) {\r\n    console.error(\"❌ Error fetching transaction:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// ✅ Fraud Risk Analysis (Rule-based + AI-based)\r\nconst checkFraudRisk = async (txData) => {\r\n  try {\r\n    console.log(\"🔍 Analyzing fraud risk for transaction:\", txData);\r\n\r\n    if (!isValidEthereumAddress(txData.from)) throw new Error(`❌ Invalid sender address: ${txData.from}`);\r\n    if (txData.to && !isValidEthereumAddress(txData.to)) throw new Error(`❌ Invalid recipient address: ${txData.to}`);\r\n\r\n    const senderTxCount = await provider.getTransactionCount(txData.from);\r\n    const recentTxs = await provider.getLogs({ fromBlock: 'latest', address: txData.from });\r\n\r\n    // ✅ Define Risk Rules\r\n    const SEPOLIA_RULES = { HIGH_VALUE: 0.3, HIGH_GAS: 3, NEW_ACCOUNT: 3, FREQUENT_TX: 5 };\r\n    let ruleBasedRisk = 0;\r\n    const flags = {};\r\n\r\n    const value = parseFloat(txData.value);\r\n    const gasPrice = parseFloat(txData.gasPrice);\r\n\r\n    // ✅ Rule-based Detection\r\n    if (value === 0) {\r\n      ruleBasedRisk += 45;\r\n      flags.zeroValue = \"Zero transaction value\";\r\n    }\r\n    \r\n    if (txData.to && !VERIFIED_CONTRACTS.includes(txData.to)) {\r\n      ruleBasedRisk += 30;\r\n      flags.unverifiedContract = \"Unverified contract address\";\r\n    }\r\n    \r\n    if (value > SEPOLIA_RULES.HIGH_VALUE) {\r\n      ruleBasedRisk += 40;\r\n      flags.highValue = \"High-value transaction\";\r\n    }\r\n    \r\n    if (gasPrice <= 10) {\r\n      // No risk added\r\n    } else if (gasPrice <= 30) {\r\n      ruleBasedRisk += 15;\r\n      flags.gasPriceTier = \"Moderate Gas Cost\";\r\n    } else if (gasPrice <= 50) {\r\n      ruleBasedRisk += 24;\r\n      flags.gasPriceTier = \"High Gas Cost\";\r\n    } else {\r\n      ruleBasedRisk += 35;\r\n      flags.gasPriceTier = \"Very High Gas Cost\";\r\n    }\r\n    \r\n    \r\n    if (senderTxCount < SEPOLIA_RULES.NEW_ACCOUNT) {\r\n      ruleBasedRisk += 30;\r\n      flags.newAccount = \"Suspicious new account\";\r\n    }\r\n    \r\n    if (recentTxs.length > SEPOLIA_RULES.FREQUENT_TX) {\r\n      ruleBasedRisk += 25;\r\n      flags.frequentTransactions = \"Frequent transactions in short time\";\r\n    }\r\n\r\n    const ageWeight = Math.max(0, 10 - (parseFloat(txData.ageHours) / 3));\r\n    ruleBasedRisk += ageWeight;\r\n\r\n    if (parseFloat(txData.ageHours) > 3 && ruleBasedRisk > 20) {\r\n      ruleBasedRisk += 10;\r\n      flags.oldTransaction = \"Transaction older than 3 hours\";\r\n    }\r\n\r\n    console.log(\"✅ Rule-based Risk Score:\", ruleBasedRisk, \"Flags:\", flags);\r\n\r\n    // ✅ AI-Based Prediction\r\n    const aiPrediction = await getAIPrediction(txData);\r\n\r\n    const result = {\r\n      ruleBasedRisk: Math.min(ruleBasedRisk, 100).toFixed(2),\r\n      aiBasedRisk: aiPrediction.fraud_probability.toFixed(2),\r\n      isFraud: aiPrediction.is_fraud,\r\n      flags\r\n    };\r\n\r\n    console.log(\"✅ Final Fraud Analysis:\", result);\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\"❌ Fraud analysis failed:\", error);\r\n    return { ruleBasedRisk: \"0%\", aiBasedRisk: \"0%\", isFraud: false, flags: {} };\r\n  }\r\n};\r\n\r\n// ✅ Function to Call Flask API for AI-based Fraud Detection\r\nconst getAIPrediction = async (txData) => {\r\n  try {\r\n    console.log(\"📡 Sending transaction data to AI model for fraud prediction...\");\r\n\r\n    const response = await fetch(`${API_BASE_URL}/predict`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        tx_value_eth: txData.value,\r\n        gas_price_gwei: txData.gasPrice,\r\n        time_since_last_tx: txData.ageHours,\r\n        num_transactions_per_address: 50, \r\n        account_age_days: 365, \r\n        gas_fee_ratio: 0.02\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"❌ AI model prediction failed.\");\r\n    }\r\n\r\n    const prediction = await response.json();\r\n    console.log(\"✅ AI Model Response:\", prediction);\r\n    return prediction;\r\n  } catch (error) {\r\n    console.error(\"❌ AI prediction error:\", error);\r\n    return { is_fraud: false, fraud_probability: 0 };\r\n  }\r\n};\r\n\r\n// ✅ Export Service\r\nconst BlockchainService = { checkFraudRisk, getTransaction };\r\nexport default BlockchainService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}