{"ast":null,"code":"import{ethers}from'ethers';const INFURA_KEY=process.env.REACT_APP_INFURA_KEY;const API_BASE_URL=\"http://127.0.0.1:5000\";if(!INFURA_KEY){throw new Error(\"❌ Missing INFURA API Key. Please check your .env file.\");}const provider=new ethers.JsonRpcProvider(`https://sepolia.infura.io/v3/${INFURA_KEY}`);// List of verified contracts\nconst VERIFIED_CONTRACTS=['0xdac17f958d2ee523a2206206994597c13d831ec7'];// ✅ Helper functions\nconst isValidEthereumAddress=address=>ethers.isAddress(address);const formatEtherValue=weiValue=>parseFloat(ethers.formatEther(weiValue)).toFixed(6);const formatGweiValue=weiValue=>parseFloat(ethers.formatUnits(weiValue,\"gwei\")).toFixed(6);// ✅ Get transaction details from blockchain\nconst getTransaction=async txHash=>{try{if(!txHash||typeof txHash!==\"string\")throw new Error(\"❌ Invalid transaction hash.\");const transaction=await provider.getTransaction(txHash);if(!transaction)throw new Error(\"❌ Transaction not found.\");const block=await provider.getBlock(transaction.blockNumber);const timestamp=(block===null||block===void 0?void 0:block.timestamp)||Math.floor(Date.now()/1000);return{hash:transaction.hash,from:transaction.from,to:transaction.to||\"N/A\",value:formatEtherValue(transaction.value),gasPrice:formatGweiValue(transaction.gasPrice),ageHours:((Date.now()/1000-timestamp)/3600).toFixed(2)};}catch(error){console.error(\"❌ Error fetching transaction:\",error);return null;}};// ✅ Fraud Risk Calculation Function (Rule-based + AI-based)\nconst checkFraudRisk=async txData=>{try{if(!isValidEthereumAddress(txData.from))throw new Error(`❌ Invalid sender address: ${txData.from}`);if(txData.to&&!isValidEthereumAddress(txData.to))throw new Error(`❌ Invalid recipient address: ${txData.to}`);const senderTxCount=await provider.getTransactionCount(txData.from);const recentTxs=await provider.getLogs({fromBlock:'latest',address:txData.from});// Define Risk Rules\nconst SEPOLIA_RULES={HIGH_VALUE:0.3,HIGH_GAS:3,NEW_ACCOUNT:3,FREQUENT_TX:5};let ruleBasedRisk=0;const flags={};const value=parseFloat(txData.value);const gasPrice=parseFloat(txData.gasPrice);if(value===0){ruleBasedRisk+=45;flags.zeroValue=true;}if(txData.to&&!VERIFIED_CONTRACTS.includes(txData.to)){ruleBasedRisk+=30;flags.unverifiedContract=true;}if(value>SEPOLIA_RULES.HIGH_VALUE){ruleBasedRisk+=40;flags.highValue=true;}if(gasPrice>SEPOLIA_RULES.HIGH_GAS){ruleBasedRisk+=35;flags.highGas=true;}if(senderTxCount<SEPOLIA_RULES.NEW_ACCOUNT){ruleBasedRisk+=30;flags.newAccount=true;}if(recentTxs.length>SEPOLIA_RULES.FREQUENT_TX){ruleBasedRisk+=25;flags.frequentTransactions=true;}const ageWeight=Math.max(0,10-parseFloat(txData.ageHours)/3);ruleBasedRisk+=ageWeight;if(parseFloat(txData.ageHours)>3&&ruleBasedRisk>20){ruleBasedRisk+=10;flags.oldTransaction=true;}// ✅ AI Prediction (Calling Flask API)\nconst aiPrediction=await getAIPrediction(txData);return{ruleBasedRisk:Math.min(ruleBasedRisk,100).toFixed(2),aiBasedRisk:aiPrediction.fraud_probability.toFixed(2),isFraud:aiPrediction.is_fraud,flags};}catch(error){console.error(\"❌ Fraud analysis failed:\",error);return{ruleBasedRisk:\"0%\",aiBasedRisk:\"0%\",isFraud:false,flags:{}};}};// ✅ Function to Call Flask API\nconst getAIPrediction=async txData=>{try{const response=await fetch(`${API_BASE_URL}/predict`,{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({tx_value_eth:txData.value,gas_price_gwei:txData.gasPrice,time_since_last_tx:txData.ageHours,num_transactions_per_address:50,account_age_days:365,gas_fee_ratio:0.02})});if(!response.ok){throw new Error(\"❌ AI model prediction failed.\");}return await response.json();}catch(error){console.error(\"❌ AI prediction error:\",error);return{is_fraud:false,fraud_probability:0};}};// ✅ Export Service\nconst BlockchainService={checkFraudRisk,getTransaction};export default BlockchainService;","map":{"version":3,"names":["ethers","INFURA_KEY","process","env","REACT_APP_INFURA_KEY","API_BASE_URL","Error","provider","JsonRpcProvider","VERIFIED_CONTRACTS","isValidEthereumAddress","address","isAddress","formatEtherValue","weiValue","parseFloat","formatEther","toFixed","formatGweiValue","formatUnits","getTransaction","txHash","transaction","block","getBlock","blockNumber","timestamp","Math","floor","Date","now","hash","from","to","value","gasPrice","ageHours","error","console","checkFraudRisk","txData","senderTxCount","getTransactionCount","recentTxs","getLogs","fromBlock","SEPOLIA_RULES","HIGH_VALUE","HIGH_GAS","NEW_ACCOUNT","FREQUENT_TX","ruleBasedRisk","flags","zeroValue","includes","unverifiedContract","highValue","highGas","newAccount","length","frequentTransactions","ageWeight","max","oldTransaction","aiPrediction","getAIPrediction","min","aiBasedRisk","fraud_probability","isFraud","is_fraud","response","fetch","method","headers","body","JSON","stringify","tx_value_eth","gas_price_gwei","time_since_last_tx","num_transactions_per_address","account_age_days","gas_fee_ratio","ok","json","BlockchainService"],"sources":["C:/Users/gurus/New fold/blockchain-fraud-detect-new/frontend/src/services/BlockchainService.js"],"sourcesContent":["import { ethers } from 'ethers';\r\n\r\nconst INFURA_KEY = process.env.REACT_APP_INFURA_KEY;\r\nconst API_BASE_URL = \"http://127.0.0.1:5000\";\r\n\r\nif (!INFURA_KEY) {\r\n  throw new Error(\"❌ Missing INFURA API Key. Please check your .env file.\");\r\n}\r\n\r\nconst provider = new ethers.JsonRpcProvider(\r\n  `https://sepolia.infura.io/v3/${INFURA_KEY}`\r\n);\r\n\r\n// List of verified contracts\r\nconst VERIFIED_CONTRACTS = ['0xdac17f958d2ee523a2206206994597c13d831ec7'];\r\n\r\n// ✅ Helper functions\r\nconst isValidEthereumAddress = (address) => ethers.isAddress(address);\r\nconst formatEtherValue = (weiValue) => parseFloat(ethers.formatEther(weiValue)).toFixed(6);\r\nconst formatGweiValue = (weiValue) => parseFloat(ethers.formatUnits(weiValue, \"gwei\")).toFixed(6);\r\n\r\n// ✅ Get transaction details from blockchain\r\nconst getTransaction = async (txHash) => {\r\n  try {\r\n    if (!txHash || typeof txHash !== \"string\") throw new Error(\"❌ Invalid transaction hash.\");\r\n    \r\n    const transaction = await provider.getTransaction(txHash);\r\n    if (!transaction) throw new Error(\"❌ Transaction not found.\");\r\n\r\n    const block = await provider.getBlock(transaction.blockNumber);\r\n    const timestamp = block?.timestamp || Math.floor(Date.now() / 1000);\r\n\r\n    return {\r\n      hash: transaction.hash,\r\n      from: transaction.from,\r\n      to: transaction.to || \"N/A\",\r\n      value: formatEtherValue(transaction.value),\r\n      gasPrice: formatGweiValue(transaction.gasPrice),\r\n      ageHours: ((Date.now() / 1000 - timestamp) / 3600).toFixed(2)\r\n    };\r\n  } catch (error) {\r\n    console.error(\"❌ Error fetching transaction:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// ✅ Fraud Risk Calculation Function (Rule-based + AI-based)\r\nconst checkFraudRisk = async (txData) => {\r\n  try {\r\n    if (!isValidEthereumAddress(txData.from)) throw new Error(`❌ Invalid sender address: ${txData.from}`);\r\n    if (txData.to && !isValidEthereumAddress(txData.to)) throw new Error(`❌ Invalid recipient address: ${txData.to}`);\r\n\r\n    const senderTxCount = await provider.getTransactionCount(txData.from);\r\n    const recentTxs = await provider.getLogs({ fromBlock: 'latest', address: txData.from });\r\n\r\n    // Define Risk Rules\r\n    const SEPOLIA_RULES = { HIGH_VALUE: 0.3, HIGH_GAS: 3, NEW_ACCOUNT: 3, FREQUENT_TX: 5 };\r\n    let ruleBasedRisk = 0;\r\n    const flags = {};\r\n\r\n    const value = parseFloat(txData.value);\r\n    const gasPrice = parseFloat(txData.gasPrice);\r\n\r\n    if (value === 0) {\r\n      ruleBasedRisk += 45;\r\n      flags.zeroValue = true;\r\n    }\r\n    \r\n    if (txData.to && !VERIFIED_CONTRACTS.includes(txData.to)) {\r\n      ruleBasedRisk += 30;\r\n      flags.unverifiedContract = true;\r\n    }\r\n    \r\n    if (value > SEPOLIA_RULES.HIGH_VALUE) {\r\n      ruleBasedRisk += 40;\r\n      flags.highValue = true;\r\n    }\r\n    \r\n    if (gasPrice > SEPOLIA_RULES.HIGH_GAS) {\r\n      ruleBasedRisk += 35;\r\n      flags.highGas = true;\r\n    }\r\n    \r\n    if (senderTxCount < SEPOLIA_RULES.NEW_ACCOUNT) {\r\n      ruleBasedRisk += 30;\r\n      flags.newAccount = true;\r\n    }\r\n    \r\n    if (recentTxs.length > SEPOLIA_RULES.FREQUENT_TX) {\r\n      ruleBasedRisk += 25;\r\n      flags.frequentTransactions = true;\r\n    }\r\n\r\n    const ageWeight = Math.max(0, 10 - (parseFloat(txData.ageHours) / 3));\r\n    ruleBasedRisk += ageWeight;\r\n    if (parseFloat(txData.ageHours) > 3 && ruleBasedRisk > 20) {\r\n      ruleBasedRisk += 10;\r\n      flags.oldTransaction = true;\r\n    }    \r\n\r\n    // ✅ AI Prediction (Calling Flask API)\r\n    const aiPrediction = await getAIPrediction(txData);\r\n    \r\n    return {\r\n      ruleBasedRisk: Math.min(ruleBasedRisk, 100).toFixed(2),\r\n      aiBasedRisk: aiPrediction.fraud_probability.toFixed(2),\r\n      isFraud: aiPrediction.is_fraud,\r\n      flags\r\n    };\r\n  } catch (error) {\r\n    console.error(\"❌ Fraud analysis failed:\", error);\r\n    return { ruleBasedRisk: \"0%\", aiBasedRisk: \"0%\", isFraud: false, flags: {} };\r\n  }\r\n};\r\n\r\n// ✅ Function to Call Flask API\r\nconst getAIPrediction = async (txData) => {\r\n  try {\r\n    const response = await fetch(`${API_BASE_URL}/predict`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        tx_value_eth: txData.value,\r\n        gas_price_gwei: txData.gasPrice,\r\n        time_since_last_tx: txData.ageHours,\r\n        num_transactions_per_address: 50, \r\n        account_age_days: 365, \r\n        gas_fee_ratio: 0.02\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"❌ AI model prediction failed.\");\r\n    }\r\n\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error(\"❌ AI prediction error:\", error);\r\n    return { is_fraud: false, fraud_probability: 0 };\r\n  }\r\n};\r\n\r\n// ✅ Export Service\r\nconst BlockchainService = { checkFraudRisk, getTransaction };\r\nexport default BlockchainService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}