{"ast":null,"code":"import { ethers } from 'ethers';\n\n// ‚úÖ Load Environment Variables\nconst INFURA_KEY = process.env.REACT_APP_INFURA_KEY;\nconst API_BASE_URL = \"http://127.0.0.1:5000\";\nif (!INFURA_KEY) {\n  throw new Error(\"‚ùå Missing INFURA API Key. Please check your .env file.\");\n}\n\n// ‚úÖ Set Up Provider\nconst provider = new ethers.JsonRpcProvider(`https://sepolia.infura.io/v3/${INFURA_KEY}`);\n\n// ‚úÖ List of Verified Smart Contracts\nconst VERIFIED_CONTRACTS = ['0xdac17f958d2ee523a2206206994597c13d831ec7'];\n\n// ‚úÖ Helper Functions\nconst isValidEthereumAddress = address => ethers.isAddress(address);\nconst formatEtherValue = weiValue => parseFloat(ethers.formatEther(weiValue)).toFixed(6);\nconst formatGweiValue = weiValue => parseFloat(ethers.formatUnits(weiValue, \"gwei\")).toFixed(6);\n\n// ‚úÖ Fetch Transaction from Blockchain\nconst getTransaction = async txHash => {\n  try {\n    console.log(`üîç Fetching transaction details for: ${txHash}`);\n    if (!txHash || typeof txHash !== \"string\") throw new Error(\"‚ùå Invalid transaction hash.\");\n    const transaction = await provider.getTransaction(txHash);\n    if (!transaction) throw new Error(\"‚ùå Transaction not found.\");\n    const block = await provider.getBlock(transaction.blockNumber);\n    const timestamp = (block === null || block === void 0 ? void 0 : block.timestamp) || Math.floor(Date.now() / 1000);\n    const txData = {\n      hash: transaction.hash,\n      from: transaction.from,\n      to: transaction.to || \"N/A\",\n      value: formatEtherValue(transaction.value),\n      gasPrice: formatGweiValue(transaction.gasPrice),\n      ageHours: ((Date.now() / 1000 - timestamp) / 3600).toFixed(2)\n    };\n    console.log(\"‚úÖ Transaction Data:\", txData);\n    return txData;\n  } catch (error) {\n    console.error(\"‚ùå Error fetching transaction:\", error);\n    return null;\n  }\n};\n\n// ‚úÖ Fraud Risk Analysis (Rule-based + AI-based)\nconst checkFraudRisk = async txData => {\n  try {\n    console.log(\"üîç Analyzing fraud risk for transaction:\", txData);\n    if (!isValidEthereumAddress(txData.from)) throw new Error(`‚ùå Invalid sender address: ${txData.from}`);\n    if (txData.to && !isValidEthereumAddress(txData.to)) throw new Error(`‚ùå Invalid recipient address: ${txData.to}`);\n    const senderTxCount = await provider.getTransactionCount(txData.from);\n    const recentTxs = await provider.getLogs({\n      fromBlock: 'latest',\n      address: txData.from\n    });\n\n    // ‚úÖ Define Risk Rules\n    const SEPOLIA_RULES = {\n      HIGH_VALUE: 0.3,\n      HIGH_GAS: 3,\n      NEW_ACCOUNT: 3,\n      FREQUENT_TX: 5\n    };\n    let ruleBasedRisk = 0;\n    const flags = {};\n    const value = parseFloat(txData.value);\n    const gasPrice = parseFloat(txData.gasPrice);\n\n    // ‚úÖ Rule-based Detection\n    if (value === 0) {\n      ruleBasedRisk += 45;\n      flags.zeroValue = \"Zero transaction value\";\n    }\n    if (txData.to && !VERIFIED_CONTRACTS.includes(txData.to)) {\n      ruleBasedRisk += 30;\n      flags.unverifiedContract = true;\n    }\n    if (value > SEPOLIA_RULES.HIGH_VALUE) {\n      ruleBasedRisk += 40;\n      flags.highValue = true;\n    }\n    if (gasPrice <= 10) {\n      // No risk added\n    } else if (gasPrice <= 30) {\n      ruleBasedRisk += 15;\n      flags.gasPriceTier = \"Moderate (10‚Äì30)\";\n    } else if (gasPrice <= 50) {\n      ruleBasedRisk += 24;\n      flags.gasPriceTier = \"High (30‚Äì50)\";\n    } else {\n      ruleBasedRisk += 35;\n      flags.gasPriceTier = \"Very High (50+)\";\n    }\n    if (senderTxCount < SEPOLIA_RULES.NEW_ACCOUNT) {\n      ruleBasedRisk += 30;\n      flags.newAccount = true;\n    }\n    if (recentTxs.length > SEPOLIA_RULES.FREQUENT_TX) {\n      ruleBasedRisk += 25;\n      flags.frequentTransactions = true;\n    }\n    const ageWeight = Math.max(0, 10 - parseFloat(txData.ageHours) / 3);\n    ruleBasedRisk += ageWeight;\n    if (parseFloat(txData.ageHours) > 3 && ruleBasedRisk > 20) {\n      ruleBasedRisk += 10;\n      flags.oldTransaction = true;\n    }\n    console.log(\"‚úÖ Rule-based Risk Score:\", ruleBasedRisk, \"Flags:\", flags);\n\n    // ‚úÖ AI-Based Prediction\n    const aiPrediction = await getAIPrediction(txData);\n    const result = {\n      ruleBasedRisk: Math.min(ruleBasedRisk, 100).toFixed(2),\n      aiBasedRisk: aiPrediction.fraud_probability.toFixed(2),\n      isFraud: aiPrediction.is_fraud,\n      flags\n    };\n    console.log(\"‚úÖ Final Fraud Analysis:\", result);\n    return result;\n  } catch (error) {\n    console.error(\"‚ùå Fraud analysis failed:\", error);\n    return {\n      ruleBasedRisk: \"0%\",\n      aiBasedRisk: \"0%\",\n      isFraud: false,\n      flags: {}\n    };\n  }\n};\n\n// ‚úÖ Function to Call Flask API for AI-based Fraud Detection\nconst getAIPrediction = async txData => {\n  try {\n    console.log(\"üì° Sending transaction data to AI model for fraud prediction...\");\n    const response = await fetch(`${API_BASE_URL}/predict`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        tx_value_eth: txData.value,\n        gas_price_gwei: txData.gasPrice,\n        time_since_last_tx: txData.ageHours,\n        num_transactions_per_address: 50,\n        account_age_days: 365,\n        gas_fee_ratio: 0.02\n      })\n    });\n    if (!response.ok) {\n      throw new Error(\"‚ùå AI model prediction failed.\");\n    }\n    const prediction = await response.json();\n    console.log(\"‚úÖ AI Model Response:\", prediction);\n    return prediction;\n  } catch (error) {\n    console.error(\"‚ùå AI prediction error:\", error);\n    return {\n      is_fraud: false,\n      fraud_probability: 0\n    };\n  }\n};\n\n// ‚úÖ Export Service\nconst BlockchainService = {\n  checkFraudRisk,\n  getTransaction\n};\nexport default BlockchainService;","map":{"version":3,"names":["ethers","INFURA_KEY","process","env","REACT_APP_INFURA_KEY","API_BASE_URL","Error","provider","JsonRpcProvider","VERIFIED_CONTRACTS","isValidEthereumAddress","address","isAddress","formatEtherValue","weiValue","parseFloat","formatEther","toFixed","formatGweiValue","formatUnits","getTransaction","txHash","console","log","transaction","block","getBlock","blockNumber","timestamp","Math","floor","Date","now","txData","hash","from","to","value","gasPrice","ageHours","error","checkFraudRisk","senderTxCount","getTransactionCount","recentTxs","getLogs","fromBlock","SEPOLIA_RULES","HIGH_VALUE","HIGH_GAS","NEW_ACCOUNT","FREQUENT_TX","ruleBasedRisk","flags","zeroValue","includes","unverifiedContract","highValue","gasPriceTier","newAccount","length","frequentTransactions","ageWeight","max","oldTransaction","aiPrediction","getAIPrediction","result","min","aiBasedRisk","fraud_probability","isFraud","is_fraud","response","fetch","method","headers","body","JSON","stringify","tx_value_eth","gas_price_gwei","time_since_last_tx","num_transactions_per_address","account_age_days","gas_fee_ratio","ok","prediction","json","BlockchainService"],"sources":["C:/Users/gurus/New fold/blockchain-fraud-detect-new/frontend/src/services/BlockchainService.js"],"sourcesContent":["import { ethers } from 'ethers';\r\n\r\n// ‚úÖ Load Environment Variables\r\nconst INFURA_KEY = process.env.REACT_APP_INFURA_KEY;\r\nconst API_BASE_URL = \"http://127.0.0.1:5000\";\r\n\r\nif (!INFURA_KEY) {\r\n  throw new Error(\"‚ùå Missing INFURA API Key. Please check your .env file.\");\r\n}\r\n\r\n// ‚úÖ Set Up Provider\r\nconst provider = new ethers.JsonRpcProvider(`https://sepolia.infura.io/v3/${INFURA_KEY}`);\r\n\r\n// ‚úÖ List of Verified Smart Contracts\r\nconst VERIFIED_CONTRACTS = ['0xdac17f958d2ee523a2206206994597c13d831ec7'];\r\n\r\n// ‚úÖ Helper Functions\r\nconst isValidEthereumAddress = (address) => ethers.isAddress(address);\r\nconst formatEtherValue = (weiValue) => parseFloat(ethers.formatEther(weiValue)).toFixed(6);\r\nconst formatGweiValue = (weiValue) => parseFloat(ethers.formatUnits(weiValue, \"gwei\")).toFixed(6);\r\n\r\n// ‚úÖ Fetch Transaction from Blockchain\r\nconst getTransaction = async (txHash) => {\r\n  try {\r\n    console.log(`üîç Fetching transaction details for: ${txHash}`);\r\n\r\n    if (!txHash || typeof txHash !== \"string\") throw new Error(\"‚ùå Invalid transaction hash.\");\r\n\r\n    const transaction = await provider.getTransaction(txHash);\r\n    if (!transaction) throw new Error(\"‚ùå Transaction not found.\");\r\n\r\n    const block = await provider.getBlock(transaction.blockNumber);\r\n    const timestamp = block?.timestamp || Math.floor(Date.now() / 1000);\r\n\r\n    const txData = {\r\n      hash: transaction.hash,\r\n      from: transaction.from,\r\n      to: transaction.to || \"N/A\",\r\n      value: formatEtherValue(transaction.value),\r\n      gasPrice: formatGweiValue(transaction.gasPrice),\r\n      ageHours: ((Date.now() / 1000 - timestamp) / 3600).toFixed(2),\r\n    };\r\n\r\n    console.log(\"‚úÖ Transaction Data:\", txData);\r\n    return txData;\r\n  } catch (error) {\r\n    console.error(\"‚ùå Error fetching transaction:\", error);\r\n    return null;\r\n  }\r\n};\r\n\r\n// ‚úÖ Fraud Risk Analysis (Rule-based + AI-based)\r\nconst checkFraudRisk = async (txData) => {\r\n  try {\r\n    console.log(\"üîç Analyzing fraud risk for transaction:\", txData);\r\n\r\n    if (!isValidEthereumAddress(txData.from)) throw new Error(`‚ùå Invalid sender address: ${txData.from}`);\r\n    if (txData.to && !isValidEthereumAddress(txData.to)) throw new Error(`‚ùå Invalid recipient address: ${txData.to}`);\r\n\r\n    const senderTxCount = await provider.getTransactionCount(txData.from);\r\n    const recentTxs = await provider.getLogs({ fromBlock: 'latest', address: txData.from });\r\n\r\n    // ‚úÖ Define Risk Rules\r\n    const SEPOLIA_RULES = { HIGH_VALUE: 0.3, HIGH_GAS: 3, NEW_ACCOUNT: 3, FREQUENT_TX: 5 };\r\n    let ruleBasedRisk = 0;\r\n    const flags = {};\r\n\r\n    const value = parseFloat(txData.value);\r\n    const gasPrice = parseFloat(txData.gasPrice);\r\n\r\n    // ‚úÖ Rule-based Detection\r\n    if (value === 0) {\r\n      ruleBasedRisk += 45;\r\n      flags.zeroValue = \"Zero transaction value\";\r\n    }\r\n    \r\n    if (txData.to && !VERIFIED_CONTRACTS.includes(txData.to)) {\r\n      ruleBasedRisk += 30;\r\n      flags.unverifiedContract = true;\r\n    }\r\n    \r\n    if (value > SEPOLIA_RULES.HIGH_VALUE) {\r\n      ruleBasedRisk += 40;\r\n      flags.highValue = true;\r\n    }\r\n    \r\n    if (gasPrice <= 10) {\r\n      // No risk added\r\n    } else if (gasPrice <= 30) {\r\n      ruleBasedRisk += 15;\r\n      flags.gasPriceTier = \"Moderate (10‚Äì30)\";\r\n    } else if (gasPrice <= 50) {\r\n      ruleBasedRisk += 24;\r\n      flags.gasPriceTier = \"High (30‚Äì50)\";\r\n    } else {\r\n      ruleBasedRisk += 35;\r\n      flags.gasPriceTier = \"Very High (50+)\";\r\n    }\r\n    \r\n    \r\n    if (senderTxCount < SEPOLIA_RULES.NEW_ACCOUNT) {\r\n      ruleBasedRisk += 30;\r\n      flags.newAccount = true;\r\n    }\r\n    \r\n    if (recentTxs.length > SEPOLIA_RULES.FREQUENT_TX) {\r\n      ruleBasedRisk += 25;\r\n      flags.frequentTransactions = true;\r\n    }\r\n\r\n    const ageWeight = Math.max(0, 10 - (parseFloat(txData.ageHours) / 3));\r\n    ruleBasedRisk += ageWeight;\r\n\r\n    if (parseFloat(txData.ageHours) > 3 && ruleBasedRisk > 20) {\r\n      ruleBasedRisk += 10;\r\n      flags.oldTransaction = true;\r\n    }\r\n\r\n    console.log(\"‚úÖ Rule-based Risk Score:\", ruleBasedRisk, \"Flags:\", flags);\r\n\r\n    // ‚úÖ AI-Based Prediction\r\n    const aiPrediction = await getAIPrediction(txData);\r\n\r\n    const result = {\r\n      ruleBasedRisk: Math.min(ruleBasedRisk, 100).toFixed(2),\r\n      aiBasedRisk: aiPrediction.fraud_probability.toFixed(2),\r\n      isFraud: aiPrediction.is_fraud,\r\n      flags\r\n    };\r\n\r\n    console.log(\"‚úÖ Final Fraud Analysis:\", result);\r\n    return result;\r\n  } catch (error) {\r\n    console.error(\"‚ùå Fraud analysis failed:\", error);\r\n    return { ruleBasedRisk: \"0%\", aiBasedRisk: \"0%\", isFraud: false, flags: {} };\r\n  }\r\n};\r\n\r\n// ‚úÖ Function to Call Flask API for AI-based Fraud Detection\r\nconst getAIPrediction = async (txData) => {\r\n  try {\r\n    console.log(\"üì° Sending transaction data to AI model for fraud prediction...\");\r\n\r\n    const response = await fetch(`${API_BASE_URL}/predict`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        tx_value_eth: txData.value,\r\n        gas_price_gwei: txData.gasPrice,\r\n        time_since_last_tx: txData.ageHours,\r\n        num_transactions_per_address: 50, \r\n        account_age_days: 365, \r\n        gas_fee_ratio: 0.02\r\n      })\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"‚ùå AI model prediction failed.\");\r\n    }\r\n\r\n    const prediction = await response.json();\r\n    console.log(\"‚úÖ AI Model Response:\", prediction);\r\n    return prediction;\r\n  } catch (error) {\r\n    console.error(\"‚ùå AI prediction error:\", error);\r\n    return { is_fraud: false, fraud_probability: 0 };\r\n  }\r\n};\r\n\r\n// ‚úÖ Export Service\r\nconst BlockchainService = { checkFraudRisk, getTransaction };\r\nexport default BlockchainService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}